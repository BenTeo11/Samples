@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<h1 id="monitoringTitle">Monitoring: all</h1>
<div style="width:75%;">
    <canvas id="canvas"></canvas>
</div>
<br>
<br>
<button class="monitor-building" data-building-id="all">All</button>
<button class="monitor-building" data-building-id="building_1">Building 1</button>
<button class="monitor-building" data-building-id="building_2">Building 2</button>
<button class="monitor-building" data-building-id="building_3">Building 3</button>

@section scripts {

    <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js"></script>
    <script type="text/javascript">
        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
        var colorNames = Object.keys(window.chartColors);

        var timeFormat = 'DD/MM/YYYY HH:mm';     

        var color = Chart.helpers.color;
        var config = {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                title: {
                    text: 'IoT Device Monitoring'
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        time: {
                            format: timeFormat,
                            // round: 'day'
                            tooltipFormat: 'll HH:mm:ss'
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        }
                    }],
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'temperature Celsius'
                        }
                    }]
                },
            }
        };

        window.onload = function () {
            var ctx = document.getElementById('canvas').getContext('2d');
            window.myLine = new Chart(ctx, config);

        };
       
        var dataSets = [];
        var collectedData = [];

        function displayMeasurements(measurements) {
            collectedData.push({ date: new Date(), measurements: measurements });
        }

            var isUpdatingChart = false;
            function updateChart() {
                isUpdatingChart = true;
                var data = collectedData.slice();
                if (data.length == 0)
                    return;
                collectedData.length = 0;

                for (var i = 0; i < data.length; i++) {                    
                    for (var j = 0; j < data[i].measurements.length; j++) {

                        var measurement = data[i].measurements[j];
                        var deviceDataSet = dataSets[measurement.deviceId];
                        if (!deviceDataSet) {
                            var colorName = colorNames[config.data.datasets.length % colorNames.length];
                            var newColor = window.chartColors[colorName];
                            deviceDataSet = {
                                label: measurement.deviceId,
                                borderColor: newColor,
                                backgroundColor: color(newColor).alpha(0.5).rgbString(),
                                data: [],
                                fill: false
                            }

                            dataSets[measurement.deviceId] = deviceDataSet;
                            config.data.datasets.push(deviceDataSet);
                        }

                        deviceDataSet.data.push(measurement.temperature);
                    }
                    config.data.labels.push(data[i].date);
                }

                

                // set max to 5 measurements
                const MAX_MEASUREMENTS = 10;

                var measurementsToShow = MAX_MEASUREMENTS;
                dataSets.forEach(function (ds) {
                    if (ds.data.length > existingMeasurements)
                        existingMeasurements = ds.data.length;

                });

                if (config.data.labels.length > measurementsToShow)
                    config.data.labels.splice(0, config.data.labels.length - measurementsToShow);

                dataSets.forEach(function (ds) {
                    if (ds.data.length > measurementsToShow)
                        ds.data.splice(0, ds.data.length - measurementsToShow);
                });      

                window.myLine.update();
                isUpdatingChart = false;
            }

            function tryResetChart() {
                if (isUpdatingChart) {
                    setTimeout(tryResetChart, 50);
                } else {
                    dataSets = [];
                    config.data.datasets.length = 0;
                    config.data.labels.length = 0;
                    collectedData.length = 0;
                    window.myLine.update();
                }
            }

        function onConnected(connection) {
            console.log('connection started');
            setInterval(updateChart, 5 * 1000);

            var buttons = document.getElementsByClassName("monitor-building");
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].addEventListener('click', function (e) {
                    var buildingId = e.srcElement.attributes["data-building-id"].value;
                    connection.invoke('monitorBuilding', buildingId);
                    tryResetChart();

                    document.getElementById("monitoringTitle").innerText = "Monitoring: " + buildingId;                  
                });
            }
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/iot')
            .build();

        connection.on("measurement", function (measurements) {
            displayMeasurements(measurements);
        });

        connection.start()
            .then(function () {
                onConnected(connection);
            })
            .catch(function (error) {
                console.error(error.message);
            });
    </script>

}
